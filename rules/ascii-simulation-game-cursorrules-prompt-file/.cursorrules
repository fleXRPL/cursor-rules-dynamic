// ASCII Simulation Game Development Guide
// Author: {{AUTHOR_NAME}} ({{GITHUB_USERNAME}})

// What you can build with this ruleset:
A text-based simulation game using ASCII characters:
- Dynamic game world representation
- Real-time or turn-based gameplay
- Entity movement and collision
- Game state management
- Event handling system
- Save/load functionality
- Custom ASCII graphics
- Terminal-based UI

// Project Structure
src/
  core/           # Core game engine
    engine.py     # Main game loop
    world.py      # World management
    entity.py     # Entity system
    events.py     # Event handling
  graphics/       # ASCII rendering
    renderer.py   # ASCII renderer
    sprites.py    # ASCII sprite definitions
    colors.py     # Color management
  input/          # Input handling
    keyboard.py   # Keyboard input
    commands.py   # Command processing
  game/           # Game specific
    entities/     # Game entities
    states/       # Game states
    rules/        # Game rules
    ai/           # AI behavior
  utils/          # Utilities
    logger.py     # Logging
    config.py     # Configuration
  data/           # Game data
    maps/         # World maps
    saves/        # Save files
  tests/          # Test suite

// Development Guidelines
1. ASCII Graphics:
   - Use consistent character sets
   - Define clear sprite patterns
   - Handle color codes properly
   - Manage screen buffer
   - Handle terminal sizes
   - Support different terminals

2. Game Engine:
   - Implement game loop
   - Handle state updates
   - Process input events
   - Manage entities
   - Handle collisions
   - Control game speed

3. Performance:
   - Optimize rendering
   - Minimize screen updates
   - Efficient collision checks
   - Memory management
   - Buffer optimization
   - Handle large worlds

// Dependencies
Core:
- python>=3.8.0
- blessed>=1.19.0
- numpy>=1.21.0
- pyyaml>=6.0.0
- attrs>=21.4.0

Optional:
- pytest>=7.0.0
- mypy>=0.950
- black>=22.3.0
- flake8>=4.0.0

// Code Examples:

1. Game Engine Pattern:
```python
from typing import List, Dict, Optional
from dataclasses import dataclass
import blessed
import time

@dataclass
class Entity:
    x: int
    y: int
    symbol: str
    color: str

class GameEngine:
    def __init__(self, width: int, height: int):
        self.term = blessed.Terminal()
        self.width = width
        self.height = height
        self.entities: List[Entity] = []
        self.running = False
        
    def add_entity(self, entity: Entity) -> None:
        self.entities.append(entity)
        
    def update(self) -> None:
        for entity in self.entities:
            self._update_entity(entity)
            
    def render(self) -> None:
        with self.term.fullscreen(), self.term.hidden_cursor():
            output = self._create_buffer()
            print(self.term.home + output)
            
    def _update_entity(self, entity: Entity) -> None:
        # Update entity logic here
        pass
        
    def _create_buffer(self) -> str:
        buffer = [[' ' for _ in range(self.width)] 
                 for _ in range(self.height)]
        
        for entity in self.entities:
            if 0 <= entity.x < self.width and 0 <= entity.y < self.height:
                buffer[entity.y][entity.x] = entity.symbol
                
        return '\n'.join(''.join(row) for row in buffer)
        
    def run(self) -> None:
        self.running = True
        while self.running:
            self.update()
            self.render()
            time.sleep(1/30)  # 30 FPS
```

2. Input Handler Pattern:
```python
from typing import Callable, Dict
from blessed import Terminal
from dataclasses import dataclass

@dataclass
class InputCommand:
    key: str
    description: str
    handler: Callable[[], None]

class InputHandler:
    def __init__(self, terminal: Terminal):
        self.term = terminal
        self.commands: Dict[str, InputCommand] = {}
        
    def register_command(self, command: InputCommand) -> None:
        self.commands[command.key] = command
        
    def handle_input(self) -> None:
        with self.term.cbreak():
            key = self.term.inkey(timeout=0.1)
            if key.name in self.commands:
                self.commands[key.name].handler()
                
    def get_help(self) -> str:
        return '\n'.join(
            f'{cmd.key}: {cmd.description}'
            for cmd in self.commands.values()
        )
```

3. ASCII Renderer Pattern:
```python
from typing import List, Dict, Tuple
from dataclasses import dataclass
import blessed

@dataclass
class Sprite:
    chars: List[str]
    color: str
    transparent_char: str = ' '

class ASCIIRenderer:
    def __init__(self, terminal: blessed.Terminal):
        self.term = terminal
        self.sprites: Dict[str, Sprite] = {}
        self.buffer: List[List[Tuple[str, str]]] = []
        
    def register_sprite(self, name: str, sprite: Sprite) -> None:
        self.sprites[name] = sprite
        
    def draw_sprite(self, name: str, x: int, y: int) -> None:
        if name not in self.sprites:
            return
            
        sprite = self.sprites[name]
        for dy, row in enumerate(sprite.chars):
            for dx, char in enumerate(row):
                if char != sprite.transparent_char:
                    self._set_buffer(
                        x + dx, 
                        y + dy, 
                        char, 
                        sprite.color
                    )
                    
    def _set_buffer(self, x: int, y: int, char: str, color: str) -> None:
        if (0 <= y < len(self.buffer) and 
            0 <= x < len(self.buffer[0])):
            self.buffer[y][x] = (char, color)
            
    def render(self) -> str:
        output = []
        for row in self.buffer:
            line = []
            for char, color in row:
                colored_char = getattr(self.term, color)(char)
                line.append(colored_char)
            output.append(''.join(line))
        return '\n'.join(output)
```

// Best Practices:
1. Use type hints
2. Handle terminal resizing
3. Implement proper cleanup
4. Use efficient data structures
5. Handle input gracefully
6. Manage game state
7. Document code
8. Write unit tests
9. Handle errors
10. Optimize performance

// Security Considerations:
1. Validate user input
2. Handle file operations safely
3. Manage game saves securely
4. Control resource usage
5. Handle terminal signals
6. Protect game state
7. Validate configuration
8. Handle crashes gracefully
9. Secure random generation
10. Manage permissions