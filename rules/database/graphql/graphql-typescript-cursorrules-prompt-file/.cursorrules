// GraphQL TypeScript Development Guide
// Author: {{AUTHOR_NAME}} ({{GITHUB_USERNAME}})

// What you can build with this ruleset:
A modern GraphQL API using TypeScript:
- Schema-first development
- Type-safe resolvers
- Authentication & Authorization
- Real-time subscriptions
- Data loaders
- Custom directives
- Error handling
- Testing framework

// Project Structure
src/
  schema/              # GraphQL schema
    typeDefs/          # Type definitions
      user.graphql     # User type definition
      product.graphql  # Product type definition
    resolvers/         # Resolvers
      user.ts          # User resolver
      product.ts       # Product resolver
    directives/        # Custom directives
      auth.ts          # Authentication directive
      validation.ts    # Validation directive
  models/              # Data models
    User.ts            # User model
    Product.ts         # Product model
  services/            # Business logic
    UserService.ts     # User service
    ProductService.ts  # Product service
  dataloaders/         # Data loaders
    UserLoader.ts      # User loader
    ProductLoader.ts   # Product loader
  utils/               # Utilities
    auth.ts            # Authentication utility
    validation.ts      # Validation utility
  config/              # Configuration
    apollo.ts          # Apollo configuration
    database.ts        # Database configuration
  tests/               # Test suite
    integration/       # Integration tests
    unit/              # Unit tests

// Development Guidelines
1. Schema Design:
   - Type definitions
   - Input types
   - Mutations
   - Queries
   - Subscriptions
   - Custom scalars
   - Directives

2. Code Structure:
   - Resolver pattern
   - Service layer
   - Data loaders
   - Error handling
   - Authentication
   - Authorization

3. Performance:
   - N+1 queries
   - Caching
   - Batching
   - Query complexity
   - Rate limiting
   - Monitoring

// Dependencies
Core:
- apollo-server: "^4.7.0"
- graphql: "^16.6.0"
- type-graphql: "^2.0.0"
- dataloader: "^2.2.0"

Optional:
- graphql-tools: "^9.0.0"
- graphql-shield: "^7.6.0"
- graphql-scalars: "^1.22.0"
- jest: "^29.5.0"

// Code Examples:

1. Schema Definition:
```graphql
type User {
  id: ID!
  email: String!
  name: String!
  posts: [Post!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Post {
  id: ID!
  title: String!
  content: String!
  author: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input CreateUserInput {
  email: String!
  name: String!
  password: String!
}

input UpdateUserInput {
  name: String
  password: String
}

type Query {
  user(id: ID!): User
  users(page: Int, limit: Int): [User!]!
  me: User
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
}

type Subscription {
  userCreated: User!
}
```

2. Resolver Pattern:
```typescript
import { Resolver, Query, Mutation, Arg, Ctx, UseMiddleware } from 'type-graphql';
import { User, CreateUserInput, UpdateUserInput } from '../models/User';
import { UserService } from '../services/UserService';
import { isAuthenticated } from '../middleware/auth';
import { Context } from '../types/Context';

@Resolver(User)
export class UserResolver {
  constructor(
    private readonly userService: UserService,
  ) {}

  @Query(() => User, { nullable: true })
  async user(
    @Arg('id') id: string,
    @Ctx() ctx: Context
  ): Promise<User | null> {
    return this.userService.findById(id);
  }

  @Query(() => [User])
  @UseMiddleware(isAuthenticated)
  async users(
    @Arg('page', { nullable: true }) page?: number,
    @Arg('limit', { nullable: true }) limit?: number,
    @Ctx() ctx: Context
  ): Promise<User[]> {
    return this.userService.findAll({ page, limit });
  }

  @Mutation(() => User)
  async createUser(
    @Arg('input') input: CreateUserInput,
    @Ctx() ctx: Context
  ): Promise<User> {
    return this.userService.create(input);
  }

  @Mutation(() => User)
  @UseMiddleware(isAuthenticated)
  async updateUser(
    @Arg('id') id: string,
    @Arg('input') input: UpdateUserInput,
    @Ctx() ctx: Context
  ): Promise<User> {
    return this.userService.update(id, input);
  }

  @Mutation(() => Boolean)
  @UseMiddleware(isAuthenticated)
  async deleteUser(
    @Arg('id') id: string,
    @Ctx() ctx: Context
  ): Promise<boolean> {
    await this.userService.delete(id);
    return true;
  }
}
```

3. Service Pattern:
```typescript
import { Service } from 'typedi';
import { Repository } from 'typeorm';
import { User, CreateUserInput, UpdateUserInput } from '../models/User';
import { ValidationError, NotFoundError } from '../utils/errors';
import { hashPassword } from '../utils/auth';

@Service()
export class UserService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
  ) {}

  async findById(id: string): Promise<User | null> {
    const user = await this.userRepository.findOne({ where: { id } });
    if (!user) {
      throw new NotFoundError('User not found');
    }
    return user;
  }

  async findAll(options: { page?: number; limit?: number }): Promise<User[]> {
    const { page = 1, limit = 10 } = options;
    return this.userRepository.find({
      skip: (page - 1) * limit,
      take: limit,
      order: { createdAt: 'DESC' },
    });
  }

  async create(input: CreateUserInput): Promise<User> {
    const existingUser = await this.userRepository.findOne({
      where: { email: input.email },
    });

    if (existingUser) {
      throw new ValidationError('Email already exists');
    }

    const hashedPassword = await hashPassword(input.password);
    const user = this.userRepository.create({
      ...input,
      password: hashedPassword,
    });

    return this.userRepository.save(user);
  }

  async update(id: string, input: UpdateUserInput): Promise<User> {
    const user = await this.findById(id);
    
    if (input.password) {
      input.password = await hashPassword(input.password);
    }

    Object.assign(user, input);
    return this.userRepository.save(user);
  }

  async delete(id: string): Promise<void> {
    const user = await this.findById(id);
    await this.userRepository.remove(user);
  }
}
```

4. DataLoader Pattern:
```typescript
import DataLoader from 'dataloader';
import { Service } from 'typedi';
import { User } from '../models/User';
import { Post } from '../models/Post';
import { PostService } from './PostService';

@Service()
export class PostLoader {
  private loader: DataLoader<string, Post[]>;

  constructor(private readonly postService: PostService) {
    this.loader = new DataLoader(this.batchLoadPosts.bind(this));
  }

  private async batchLoadPosts(userIds: string[]): Promise<Post[][]> {
    const posts = await this.postService.findByUserIds(userIds);
    
    const postsByUser = userIds.map(userId =>
      posts.filter(post => post.userId === userId)
    );
    
    return postsByUser;
  }

  async loadPosts(userId: string): Promise<Post[]> {
    return this.loader.load(userId);
  }
}
```

// Best Practices:
1. Code Quality:
   - Type safety
   - Documentation
   - Testing
   - Error handling
   - Validation
   - Code organization

2. Schema Design:
   - Type definitions
   - Input validation
   - Error handling
   - Nullability
   - Pagination
   - Filtering

3. Performance:
   - Data loaders
   - Query complexity
   - Caching
   - Batching
   - Rate limiting
   - Monitoring

4. Security:
   - Authentication
   - Authorization
   - Input validation
   - Rate limiting
   - Query depth
   - Field restrictions

// Security Considerations:
1. API Security:
   - Authentication
   - Authorization
   - Input validation
   - Rate limiting
   - Query complexity
   - Field restrictions

2. Data Security:
   - Password hashing
   - Data encryption
   - Access control
   - Audit logging
   - Error handling
   - Data validation

3. Infrastructure:
   - HTTPS
   - CORS
   - Headers
   - Monitoring
   - Logging
   - Backups 