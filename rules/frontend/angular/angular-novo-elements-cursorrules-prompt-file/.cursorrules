// Angular Novo Elements Development Guide
// Author: {{AUTHOR_NAME}} ({{GITHUB_USERNAME}})

// What you can build with this ruleset:
A modern Angular application using Novo Elements:
- Enterprise-grade UI components
- Form management
- Data visualization
- Responsive layouts
- Accessibility features
- Theme customization
- State management
- Performance optimization

// Project Structure
src/
  app/              # Application root
    components/     # Shared components
      forms/        # Form components
      layouts/      # Layout components
      widgets/      # UI widgets
    features/       # Feature modules
      feature-a/    # Feature module A
        components/ # Component files
        services/   # Service files
        models/     # Data models
    core/           # Core functionality
      services/     # Core services
      guards/       # Route guards
      interceptors/ # HTTP interceptors
    shared/         # Shared resources
      models/       # Data models
      pipes/        # Custom pipes
      directives/   # Custom directives
    styles/         # Global styles
      themes/       # Theme definitions
      variables/    # SCSS variables
  assets/           # Static assets
    images/         # Image files
    icons/          # Icon files
  environments/     # Environment configs

// Development Guidelines
1. Novo Elements Integration:
   - Use proper modules
   - Import components
   - Configure themes
   - Handle forms
   - Manage layouts
   - Implement data tables

2. Component Development:
   - Follow Angular patterns
   - Use proper decorators
   - Handle lifecycle hooks
   - Implement change detection
   - Use proper templates
   - Handle events properly

3. Performance Practices:
   - Use lazy loading
   - Implement caching
   - Optimize bundles
   - Handle subscriptions
   - Use proper change detection
   - Implement virtual scrolling

// Dependencies
Core:
- @angular/core: "~16.0.0"
- @angular/common: "~16.0.0"
- @angular/forms: "~16.0.0"
- @angular/router: "~16.0.0"
- @angular/platform-browser: "~16.0.0"
- novo-elements: "~7.0.0"
- rxjs: "~7.8.0"
- zone.js: "~0.13.0"

Optional:
- @angular/cdk: "~16.0.0"
- @angular-eslint/eslint-plugin: "~16.0.0"
- prettier: "^2.8.0"
- husky: "^8.0.0"
- jest: "^29.0.0"

// Code Examples:

1. Component Pattern:
```typescript
import { Component, Input, OnInit } from '@angular/core';
import { NovoFormGroup, NovoFormControl } from 'novo-elements';

@Component({
  selector: 'app-custom-form',
  template: `
    <novo-form [form]="form">
      <novo-fieldset>
        <novo-field>
          <novo-control [type]="'textbox'"
                       [label]="'Name'"
                       [placeholder]="'Enter name'">
          </novo-control>
        </novo-field>
        <novo-field>
          <novo-control [type]="'select'"
                       [label]="'Category'"
                       [options]="categories">
          </novo-control>
        </novo-field>
      </novo-fieldset>
      <novo-button theme="primary"
                   (click)="onSubmit()">
        Submit
      </novo-button>
    </novo-form>
  `
})
export class CustomFormComponent implements OnInit {
  @Input() categories: string[] = [];
  
  form: NovoFormGroup;
  
  ngOnInit(): void {
    this.form = new NovoFormGroup({
      name: new NovoFormControl(''),
      category: new NovoFormControl('')
    });
  }
  
  onSubmit(): void {
    if (this.form.valid) {
      console.log(this.form.value);
    }
  }
}
```

2. Service Pattern:
```typescript
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { NovoToastService } from 'novo-elements';
import { Observable, catchError, tap } from 'rxjs';

@Injectable({
  providedIn: 'root'
})
export class DataService {
  private apiUrl = 'api/data';
  
  constructor(
    private http: HttpClient,
    private toastService: NovoToastService
  ) {}
  
  getData(): Observable<any[]> {
    return this.http.get<any[]>(this.apiUrl).pipe(
      tap(data => {
        this.toastService.success('Data loaded successfully');
      }),
      catchError(error => {
        this.toastService.error('Failed to load data');
        throw error;
      })
    );
  }
  
  updateData(data: any): Observable<any> {
    return this.http.put(`${this.apiUrl}/${data.id}`, data).pipe(
      tap(() => {
        this.toastService.success('Data updated successfully');
      }),
      catchError(error => {
        this.toastService.error('Failed to update data');
        throw error;
      })
    );
  }
}
```

3. Module Pattern:
```typescript
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NovoElementsModule } from 'novo-elements';
import { RouterModule } from '@angular/router';

import { CustomFormComponent } from './components/custom-form.component';
import { DataService } from './services/data.service';

@NgModule({
  declarations: [
    CustomFormComponent
  ],
  imports: [
    CommonModule,
    NovoElementsModule,
    RouterModule.forChild([
      {
        path: '',
        component: CustomFormComponent
      }
    ])
  ],
  providers: [
    DataService
  ],
  exports: [
    CustomFormComponent
  ]
})
export class FeatureModule {}
```

// Best Practices:
1. Follow Angular style guide
2. Use proper typing
3. Handle errors properly
4. Implement lazy loading
5. Use proper state management
6. Write comprehensive tests
7. Document components
8. Use proper logging
9. Handle lifecycle properly
10. Optimize performance

// Security Considerations:
1. Validate user input
2. Use proper authentication
3. Handle permissions
4. Implement CSRF protection
5. Secure API calls
6. Use content security
7. Handle sensitive data
8. Implement rate limiting
9. Use secure headers
10. Follow security updates