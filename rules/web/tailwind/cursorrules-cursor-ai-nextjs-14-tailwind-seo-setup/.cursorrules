// Next.js 14 and Tailwind CSS Development Guide
// Author: {{AUTHOR_NAME}} ({{GITHUB_USERNAME}})

// What you can build with this ruleset:
A modern Next.js 14 application with:
- Server-side rendered pages
- SEO-optimized content
- Responsive layouts with Tailwind CSS
- Type-safe components with TypeScript
- Efficient data fetching
- Performance-optimized assets
- Accessible UI components
- API routes and handlers

// Project Structure
app/
  layout.tsx        # Root layout
  page.tsx          # Home page
  components/       # Shared components
    ui/             # UI components
    layout/         # Layout components
  lib/              # Utility functions
  api/              # API routes
  (routes)/         # App routes
    about/          # About page
    blog/           # Blog page
    contact/        # Contact page
  types/            # TypeScript types
  styles/           # Global styles
  public/           # Static assets

// Development Guidelines
1. Next.js Patterns:
   - Use App Router architecture
   - Implement Server Components by default
   - Use Client Components only when needed
   - Follow proper routing conventions
   - Implement proper metadata
   - Use proper loading states

2. TypeScript Best Practices:
   - Use proper type definitions
   - Implement proper interfaces
   - Use proper type inference
   - Follow naming conventions
   - Implement proper generics
   - Use proper utility types

3. Tailwind CSS Usage:
   - Use proper utility classes
   - Implement responsive design
   - Follow component patterns
   - Use proper customization
   - Implement proper theming
   - Use proper variants

// Dependencies
Core:
- next: "^14.0.0"
- react: "^18.2.0"
- react-dom: "^18.2.0"
- typescript: "^5.0.0"
- tailwindcss: "^3.3.0"
- @types/react: "^18.2.0"
- @types/node: "^20.0.0"

Optional:
- @heroicons/react: "^2.0.0"
- clsx: "^2.0.0"
- tailwind-merge: "^2.0.0"
- @tailwindcss/forms: "^0.5.0"

// Code Examples:

1. Server Component Pattern:
```tsx
// app/page.tsx
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: 'Home',
  description: 'Welcome to our site'
}

async function getData() {
  const res = await fetch('https://api.example.com/data', {
    next: { revalidate: 3600 }
  })
  if (!res.ok) throw new Error('Failed to fetch data')
  return res.json()
}

export default async function HomePage() {
  const data = await getData()
  
  return (
    <main className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-6">
        Welcome
      </h1>
      {/* Content */}
    </main>
  )
}
```

2. Client Component Pattern:
```tsx
// components/ui/Button.tsx
'use client'

import { ButtonHTMLAttributes } from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

const buttonVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive: 'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline: 'border border-input hover:bg-accent hover:text-accent-foreground',
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 px-3',
        lg: 'h-11 px-8',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

interface ButtonProps
  extends ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {}

export function Button({ className, variant, size, ...props }: ButtonProps) {
  return (
    <button
      className={buttonVariants({ variant, size, className })}
      {...props}
    />
  )
}
```

3. API Route Pattern:
```tsx
// app/api/items/route.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  try {
    const items = await db.items.findMany()
    return NextResponse.json(items)
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to fetch items' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const data = await request.json()
    const item = await db.items.create({ data })
    return NextResponse.json(item)
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to create item' },
      { status: 500 }
    )
  }
}
```

// Best Practices:
1. Use Server Components by default
2. Implement proper error boundaries
3. Use proper loading states
4. Implement proper metadata
5. Use proper image optimization
6. Implement proper caching
7. Use proper TypeScript patterns
8. Implement proper accessibility
9. Use proper SEO practices
10. Follow performance guidelines

// Security Considerations:
1. Validate user input
2. Use proper authentication
3. Implement proper CORS
4. Use proper headers
5. Implement proper CSP
6. Use proper rate limiting
7. Handle errors securely
8. Implement proper validation
9. Use proper encryption
10. Follow security updates