// ES Module Node.js Development Guide
// Author: {{AUTHOR_NAME}} ({{GITHUB_USERNAME}})

// What you can build with this ruleset:
A modern Node.js application with:
- ES Module architecture
- Modular components
- Async operations
- Type safety
- Performance optimization
- Error handling
- Testing infrastructure
- Development tooling

// Project Structure
src/
  index.js         # Entry point
  modules/         # ES modules
    core/          # Core modules
    utils/         # Utilities
    services/      # Services
  config/          # Configuration
    env.js         # Environment
    constants.js   # Constants
  middleware/      # Middleware
  models/          # Data models
  tests/           # Test files
    unit/          # Unit tests
    integration/   # Integration tests
  types/           # Type definitions
  docs/            # Documentation

// Development Guidelines
1. Module Patterns:
   - Use ES module syntax
   - Implement pure functions
   - Handle async properly
   - Use type annotations
   - Follow conventions
   - Manage dependencies

2. Code Organization:
   - Separate concerns
   - Use proper imports
   - Handle errors
   - Implement testing
   - Document code
   - Follow standards

3. Performance Practices:
   - Optimize imports
   - Handle async ops
   - Manage memory
   - Use proper caching
   - Monitor performance
   - Profile code

// Dependencies
Core:
- node: "^20.0.0"
- typescript: "^5.2.0"
- jest: "^29.7.0"
- eslint: "^8.53.0"
- prettier: "^3.1.0"

Optional:
- nodemon: "^3.0.1"
- ts-node: "^10.9.0"
- dotenv: "^16.3.0"
- winston: "^3.11.0"

// Code Examples:

1. ES Module Pattern:
```javascript
// src/modules/core/user.js
import { validateEmail } from '../utils/validators.js';
import { DatabaseError } from '../utils/errors.js';

export class User {
  #email;
  #name;
  
  constructor(name, email) {
    this.#validateInputs(name, email);
    this.#name = name;
    this.#email = email;
  }
  
  #validateInputs(name, email) {
    if (!name?.trim()) {
      throw new Error('Name is required');
    }
    if (!validateEmail(email)) {
      throw new Error('Invalid email format');
    }
  }
  
  static async findByEmail(email) {
    try {
      const user = await db.users.findOne({ email });
      return user ? new User(user.name, user.email) : null;
    } catch (error) {
      throw new DatabaseError('Failed to fetch user', error);
    }
  }
  
  toJSON() {
    return {
      name: this.#name,
      email: this.#email
    };
  }
}
```

2. Service Pattern:
```javascript
// src/services/auth.js
import { User } from '../modules/core/user.js';
import { generateToken } from '../utils/jwt.js';
import { AuthError } from '../utils/errors.js';

export class AuthService {
  static async authenticate(email, password) {
    try {
      const user = await User.findByEmail(email);
      
      if (!user) {
        throw new AuthError('User not found');
      }
      
      const isValid = await user.validatePassword(password);
      if (!isValid) {
        throw new AuthError('Invalid password');
      }
      
      const token = generateToken(user.toJSON());
      return { user, token };
    } catch (error) {
      if (error instanceof AuthError) {
        throw error;
      }
      throw new Error('Authentication failed');
    }
  }
  
  static async validateToken(token) {
    try {
      const payload = verifyToken(token);
      const user = await User.findByEmail(payload.email);
      return user;
    } catch (error) {
      throw new AuthError('Invalid token');
    }
  }
}
```

3. Utility Pattern:
```javascript
// src/utils/async-handler.js
export const asyncHandler = (fn) => {
  return async (req, res, next) => {
    try {
      await fn(req, res, next);
    } catch (error) {
      next(error);
    }
  };
};

export const withTransaction = async (fn) => {
  const session = await startSession();
  try {
    session.startTransaction();
    const result = await fn(session);
    await session.commitTransaction();
    return result;
  } catch (error) {
    await session.abortTransaction();
    throw error;
  } finally {
    session.endSession();
  }
};

export const memoize = (fn) => {
  const cache = new Map();
  
  return (...args) => {
    const key = JSON.stringify(args);
    if (cache.has(key)) {
      return cache.get(key);
    }
    
    const result = fn.apply(this, args);
    cache.set(key, result);
    return result;
  };
};
```

// Best Practices:
1. Use ES module syntax
2. Implement proper typing
3. Handle errors gracefully
4. Use async/await
5. Implement testing
6. Document code properly
7. Follow conventions
8. Optimize imports
9. Handle security
10. Monitor performance

// Security Considerations:
1. Validate input
2. Handle authentication
3. Implement authorization
4. Secure data
5. Use proper encryption
6. Handle secrets
7. Validate dependencies
8. Implement logging
9. Handle errors securely
10. Follow updates